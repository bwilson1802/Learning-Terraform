Welcome to Step 4!  The goal of this step is to not hardcode each item and start using variables.  

create two files
1.  variables.tf
2.  values.tfvars


Here is how we change the resources in main.ft to call each variable

setup for two values 

resource _azurerm_resource_groups" "rg" {
for_each = var.resource_groups

  name = each.key
  location = each.value
}


setup for more than two values
 
  resource "azurerm_virtual_network" "VNET" {
    for_each = var.virtual_network
  
    name                = each.key
    resource_group_name = each.value.resource_group_name
    location            = each.value.location
    address_space       = each.value.address_space
  }


setup for nested values

resource "azurerm_windows_virtual_machine" "VM" {
  for_each = var.azurerm_windows_virtual_machine

  name                  = each.key
  resource_group_name   = each.value.resource_group_name
  location              = each.value.location
  size                  = each.value.size
  admin_username        = each.value.admin_username
  admin_password        = each.value.admin_password
  network_interface_ids = [azurerm_network_interface.NIC[each.value.NIC_name].id]
  depends_on            = [azurerm_network_interface.NIC]

  os_disk {
    caching              = each.value.os_disk.caching
    storage_account_type = each.value.os_disk.storage_account_type
  }

  source_image_reference {
    publisher = each.value.source_image_reference.publisher
    offer     = each.value.source_image_reference.offer
    sku       = each.value.source_image_reference.sku
    version   = each.value.source_image_reference.version
  }

  tags = {
    enviornment = "dev"
  }
}

Add the resource name to the variables.tf file

tfvars is where we write what each line will pull

When you run the commands you need to call  the new files.  Here is an example

terraform plan -input=false -var-file="values.tfvars"
terraform apply -auto-approve -var-file="values.tfvars"
terraform destroy -auto-approve -var-file="values.tfvars"






working!!!!!!!!!!!!!


