terraform plan -input=false -var-file="values.tfvars"

terraform apply -auto-approve -var-file="values.tfvars"

terraform destroy -auto-approve -var-file="values.tfvars"





# create two files
1.  variables.tf
2.  values.tfvars


# setup for two values 

resource _azurerm_resource_groups" "rg" {
for_each = var.resource_groups

  name = each.key
  location = each.value
}


# setup for more than two values

resource "azurerm_resource_group" "rg" {
    for_each = var.resource_group
  
    name     = each.key
    location = each.value
  }
  
  resource "azurerm_virtual_network" "VNET" {
    for_each = var.virtual_network
  
    name                = each.key
    resource_group_name = each.value.resource_group_name
    location            = each.value.location
    address_space       = each.value.address_space
  }
} 

# setup for nested values

resource "azurerm_windows_virtual_machine" "VM" {
  for_each = var.azurerm_windows_virtual_machine

  name                  = each.key
  resource_group_name   = each.value.resource_group_name
  location              = each.value.location
  size                  = each.value.size
  admin_username        = each.value.admin_username
  admin_password        = each.value.admin_password
  network_interface_ids = [azurerm_network_interface.NIC[each.value.NIC_name].id]
  depends_on            = [azurerm_network_interface.NIC]

  os_disk {
    caching              = each.value.os_disk.caching
    storage_account_type = each.value.os_disk.storage_account_type
  }

  source_image_reference {
    publisher = each.value.source_image_reference.publisher
    offer     = each.value.source_image_reference.offer
    sku       = each.value.source_image_reference.sku
    version   = each.value.source_image_reference.version
  }

  tags = {
    enviornment = "dev"
  }
}

[azurerm_network_security_group.Sec-Group[each.value.network_security_group_name].id]