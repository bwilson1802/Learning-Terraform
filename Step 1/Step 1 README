# Step 1

I struggled to get started because I was new to Git and Terraform.  This step should help you setup your system and run your first Terraform.  

# Notes
1.  <>  This tells you to put your info inside and delete the <>
2.   Choco is a site that helps you download software.  It can be used in a bash terminal to go get the software for you.  
3.   Git flight rules will help out a lot when you are starting out https://github.com/k88hudson/git-flight-rules
4.   
5.   

# System setup
1.  Git 

    a.  or choco install git

2.  Visual Studio Code 

    b.  or choco install vscode.install

3.  Terraform 

    c.  or choco install terraform

4.  Azure CLI 

    d.  or choco install azure-cli

5.  Azure PowerShell 

    e.   or choco install azurepowershell

# GIT setup (bash terminal)
1.  git config --global user.name “<Brian......>“
2.  git config --global user.email “<Brian@mydomain.com>”
3.  git config --global core.editor “notepad.exe” 
or “atom --wait” or your favorite
4.    git config --global color.ui true (false is black and white)
5.  git config –list (shows configs)

# VS code setup
1.  Download the following 
2.  Docker
3.  GitHub
4.  PowerShell
5.  Azure Tools
6.  Azure Terraform
7.  Azure Account
8.  Azure Storage Explorer
9.  YAML
10. Markdown All in One

# GitHub setup (web browser)
1.    Log in to GitHub and create a new repository 
2.    Note where to find it for later use.  The best way is to navigate to the repository and on the code tab there is a dropdown.  Copy the https

# Folder/File setup (bash terminal)
1.  Ls or dir (look where you are located) 
2.  Cd to the dir you want to be
3.  Mkdir (name your dir) (if needed)
4.  git init (guild the .git file
5.  git clone (paste your repository https address) (This will copy all files in your repository main to your computer)
    
    
# VS code
1.  Open VS code and select file, open folder
2.  Select file, new file, name it main.tf

# main.tf (VS Code)
1.  The goal of our first Terraform code is to make sure everything is working.  Add the following to the main.tf file you created. 
2.  Copy the contents of mainsetup.tf and place it in your main.tf file
3.  Once you have added the code, ctrl + s saves your changes

# First commit (VS Code)
1.  On the left side you will see source control as the third icon down.  Click it
2.  Under changes you should see the main.tf file.  There is a plus on the right side.  Click it
3.  Above the commit button is a message block.  For this first one just type main.tf setup.  You can also click commit and it will open a new window for you to type your message in.  Keep in mind that you can view the commit messages to track your changes.  Make sure you have a good message here on the changes you made.  You can type git log in bash and it will show all commits that have been made to the project.  







# below this line still needs work!

# The Git process
1.  There are 3 trees in Git.  Repository, staging index, and working
2.  Working is on your system.  Once you add it moves to staging.  Git commit adds to repository
3.  Every time you log  on run Git pull to have the current copy
4.  The HEAD always points to the current position of the repository (last commit)
5.  Create a new branch each time you are adjusting the file.  Don’t commit back to main. 
6.  Git checkout -b (new name)
7.  Git push –set-upstream-to=origin/ <branch> testbranchbuild 
8.  Git status displays where you are
9.  

# First commit (bash terminal)
1.  Git add . (adds all changes in that dir)
2.  Git commit -m (“add your message here”)
3.  
 
# Run your first Terraform
1.   

# checkout your repository
1.  


